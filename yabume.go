// Package yabume provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package yabume

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Event defines model for Event.
type Event struct {
	Content   string     `json:"content"`
	CreatedAt float32    `json:"created_at"`
	Id        string     `json:"id"`
	Kind      float32    `json:"kind"`
	Pubkey    string     `json:"pubkey"`
	Sig       string     `json:"sig"`
	Tags      [][]string `json:"tags"`
}

// PostV0EventsJSONRequestBody defines body for PostV0Events for application/json ContentType.
type PostV0EventsJSONRequestBody = Event

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostV0EventsWithBody request with any body
	PostV0EventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV0Events(ctx context.Context, body PostV0EventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0EventsId request
	GetV0EventsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0ProfilesId request
	GetV0ProfilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostV0EventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EventsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0Events(ctx context.Context, body PostV0EventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EventsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0EventsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0EventsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0ProfilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0ProfilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostV0EventsRequest calls the generic PostV0Events builder with application/json body
func NewPostV0EventsRequest(server string, body PostV0EventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV0EventsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV0EventsRequestWithBody generates requests for PostV0Events with any type of body
func NewPostV0EventsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV0EventsIdRequest generates requests for GetV0EventsId
func NewGetV0EventsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0ProfilesIdRequest generates requests for GetV0ProfilesId
func NewGetV0ProfilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostV0EventsWithBodyWithResponse request with any body
	PostV0EventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EventsResponse, error)

	PostV0EventsWithResponse(ctx context.Context, body PostV0EventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EventsResponse, error)

	// GetV0EventsIdWithResponse request
	GetV0EventsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV0EventsIdResponse, error)

	// GetV0ProfilesIdWithResponse request
	GetV0ProfilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV0ProfilesIdResponse, error)
}

type PostV0EventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Code    float32 `json:"code"`
		Message string  `json:"message"`
	}
	JSON400 *struct {
		Code    float32 `json:"code"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV0EventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0EventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0EventsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
	JSON400      *struct {
		Code    float32 `json:"code"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0EventsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0EventsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0ProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
	JSON400      *struct {
		Code    float32 `json:"code"`
		Message string  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0ProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0ProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostV0EventsWithBodyWithResponse request with arbitrary body returning *PostV0EventsResponse
func (c *ClientWithResponses) PostV0EventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EventsResponse, error) {
	rsp, err := c.PostV0EventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EventsResponse(rsp)
}

func (c *ClientWithResponses) PostV0EventsWithResponse(ctx context.Context, body PostV0EventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EventsResponse, error) {
	rsp, err := c.PostV0Events(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EventsResponse(rsp)
}

// GetV0EventsIdWithResponse request returning *GetV0EventsIdResponse
func (c *ClientWithResponses) GetV0EventsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV0EventsIdResponse, error) {
	rsp, err := c.GetV0EventsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0EventsIdResponse(rsp)
}

// GetV0ProfilesIdWithResponse request returning *GetV0ProfilesIdResponse
func (c *ClientWithResponses) GetV0ProfilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV0ProfilesIdResponse, error) {
	rsp, err := c.GetV0ProfilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0ProfilesIdResponse(rsp)
}

// ParsePostV0EventsResponse parses an HTTP response from a PostV0EventsWithResponse call
func ParsePostV0EventsResponse(rsp *http.Response) (*PostV0EventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0EventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Code    float32 `json:"code"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code    float32 `json:"code"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV0EventsIdResponse parses an HTTP response from a GetV0EventsIdWithResponse call
func ParseGetV0EventsIdResponse(rsp *http.Response) (*GetV0EventsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0EventsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code    float32 `json:"code"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV0ProfilesIdResponse parses an HTTP response from a GetV0ProfilesIdWithResponse call
func ParseGetV0ProfilesIdResponse(rsp *http.Response) (*GetV0ProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0ProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code    float32 `json:"code"`
			Message string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v0/events/)
	PostV0Events(ctx echo.Context) error

	// (GET /v0/events/{id})
	GetV0EventsId(ctx echo.Context, id string) error

	// (GET /v0/profiles/{id})
	GetV0ProfilesId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostV0Events converts echo context to params.
func (w *ServerInterfaceWrapper) PostV0Events(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV0Events(ctx)
	return err
}

// GetV0EventsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV0EventsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV0EventsId(ctx, id)
	return err
}

// GetV0ProfilesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV0ProfilesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV0ProfilesId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v0/events/", wrapper.PostV0Events)
	router.GET(baseURL+"/v0/events/:id", wrapper.GetV0EventsId)
	router.GET(baseURL+"/v0/profiles/:id", wrapper.GetV0ProfilesId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SWTW/jNhCG/4rB9misSYkURd+6QFHkFuyhlyAo+DGUZEsUTVL+CvzfC8muE2d92AIu",
	"UGBvNEXOvDPzPoTfkO473ztwKaLlG4q6hk5Oy9+34NK48KH3EFID07buXbp8gL3sfAtoiWpo236260Nr",
	"0Bylgx83YwqNq9BpjnQAmcD8JW+vkUIITjJM+fWOGzoFYbzTmNsUQkOOsWayhFxhQbnOLLdUEswUVtLy",
	"khJKGDcml5gaSVhOqARptMFWMXJP17pxt1nIHSF+UGs43IrhQkFRcLDCaKWkZkziIhNMQ8mxwhxnQllt",
	"VGY0ZKURTNisJEyRwpaEi/KemNhUt0nKTBZUy4KaDBc5Ebgoc21JqUuT48KyXJJSUcryglgO2ggquVY5",
	"LUALwqwQhjKBGWZZJigRlpW8ILbMC60ENVRpA1xarjFWWgEBaUVBuZY4s8JkKr8nMskq3qh8eZ2jJkE3",
	"7V4X393rGvd0/vjeYhmCPExBb36f5ijAZmgCGLR8GX1wncGNky7ju2iaX4157uTrNWyvVqATOo2BG2f7",
	"SV+TLi3Of3t+QnO0hRCb3qElwl/wFzyq6j046Ru0RPm0NUdepnoqb7HFCxjxiIsJkD5Oxh4xkanp3ZNB",
	"S/Tcx/Qnniga5Y01QUxfe3P4hJH0vm30dHGxiqOIfzgcV78GsGiJflm8g7q4ULo4I3o6nXsWfe/iGdIM",
	"k3+V5DPiBm6GnOF7YHQQo6xuT55fjdnzoNom1nDnNfg03inXe6z7YzMQdWh8Ok/onCIOWkOMdmjbw8xf",
	"853miGL8yOIpxj9a/FdpZt/Oc/4vCv8GaQguzqSbQQh9uEz+gxvfGnMaJVVwx5B/wNWPTxNUMsgOEoSI",
	"li9vqBlTjBZHc+RkN0qZ2HsXncIA8w+Ne+jjfAk2anlEONcnIM7l0eemGnbaVq3HWAq/WetE5XA4xqzu",
	"mNzYdaR7IXa03sfWVHHI9g5vxghTT8lmEy1ovdFrtiu3B4ZjXfNVjGkrCs6PvhJJFrt46KrMHVd11rkK",
	"r1kVU3D++GGsVxu8fscqfvyDcMc6oYEtzFINMzif+jlJ8aG3TQs/wsrz5eijaXnAv4ePtDwgnPODIskU",
	"bVEXduAbCPbIwyoLEY54qKt9KpheVft9WeBd62uflQzqzSG2w7Gi+RTh3KyRF7GWWCZ54HizzVmOPQiv",
	"t3nJEwtCZlt7CCHIssaxizQU2y4eq2yVS8f/n7xcSvtZuTmd/g4AAP///LRD2SYMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
